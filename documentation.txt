Project 2 Documentation
Benjamin Gilchrist

In turning my previous project to 3D, most of the work done was just in getting
it set up and running, as well as some major code cleanup, since the entire last
project was in one horrible file.
WebGL was way more similar to OpenGL ES than I had realized, so getting it running
was actually fairly easy. Probably the biggest hurdle was that I didnt realize
that depth testing was disabled by default, and it took a while to realize that
that was what was causing weird distortions. Thought for a while that I set the
mesh indicies wrong or something.

I used a few npm packages, notably `glMatrix`, `camera-picking-ray`, and `perspective-camera`
for camera management, as well as `perlin-noise` to generate noise for the ground.

The cell types stayed the same, but I changed the behavior of Fauna and Water to
account for the varying elevation. One thing I never liked about Fauna in my
first project was that once they were created, they would just spread everywhere
and dominate the whole map. They are now locked into lower elevations, which
caused them to just fill valleys, which I think looks much nicer, and allows the
rest of the map to stay pretty dynamic while they're around.
Water now flows downhill, and will dry out into grass at higher elevations. This
creates much nicer looking ponds or basins or whatever.

I still do not allow the user to place Fauna directly, as I prefer it to be an
emergent element, less controllable by the user. And the Growth cell type is meant
just as an part of Tree cell's growth, to slow it down a bit with an intermittent
step, so the ability to place it seemed unneeded.

I have the background color change with the simulation speed to give the user
a visual idea of when they've reached the minimum or maximum speed, without
having to show a number. It also feels fitting to me for a bright background to
mean high activity, and for a darker background to indicate a calmer, slower
simulation.

For mouse input, I didn't want to have to worry the height of the actual cells
and do any actual raycasting checking if they're in the path of the mouse or not,
so instead I just used a ray from the mouse down to a plane at Z = 0 (the max
height the cells can be) and use the X,Y intersection to figure out where on the
grid it should be. At first I rendered a cell at that location to debug and
make sure the math was checking out, but I found that that was a pretty good
visual aid and left it in, making its color change based on what cell type
was selected.

I also removed the UI and now just use buttons to change settings, which I
personally prefer, though I guess just having text at the bottom saying
what the controls are isn't too elegant.
